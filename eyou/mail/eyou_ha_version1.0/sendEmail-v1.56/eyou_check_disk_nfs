#!/usr/bin/env bash
#by liguopeng email:liguopeng@eyou.net
#by zh_CN.UTF8
SENDMAIL_FILE="/usr/local/eyou/mail/sendEmail-v1.56"
pid_name="$(basename $0).pid"
[ -f $SENDMAIL_FILE/check_master_slave ] && . $SENDMAIL_FILE/check_master_slave || exit 1

#检测crm 是否OK
check_crm () {
if crm status >/dev/null 2>&1;then
	:
else
	[ "$1" != "stop" ] && exit 1 || exit 0
fi
}

#获取当前时间戳,并且制定check格式
CHECK_TIME () {
echo "1 $(date +%s)"
}


#扫描使用ha自动挂载的硬盘
disk_scan () {

crm configure show|awk 'BEGIN { FS="device=" } {print $2}'|grep \"nfs\" |cut -d '"' -f2 && exit_val=0 || exit_val=1
while [ "$exit_val" == "" ];do crm configure show|awk 'BEGIN { FS="device=" } {print $2}'|grep \"nfs\" |cut -d '"' -f2 && exit_val=0 || exit_val=1;done
if [ $? -eq 0 ];then
	exit_val=0
else
	exit_val=1
fi

}

#使用循环扫描 检测磁盘是否挂载 ,未挂载则退出
check_disk_mount () {
disk_scan
disk_scan_path=$(disk_scan)
if [ "$exit_val" != "0" ];then
	disk_scan_path=$(disk_scan)
	[ "$exit_val" != "0" ] && exit $exit_val
fi

for i in $disk_scan_path
	do
	disk_mount_scan=$(mount -l |awk '{if($1 == "'$i'") {print $3}}'|wc -l)
	if [ $disk_mount_scan -eq 0 ];then
	exit_val=1
	[ $(mount -l |awk '{if($1 == "'$i'") {print $3}}'|wc -l) -eq 0 ] && exit $exit_val
	fi
done 

}


#启动时候检查动作
start_check () {

check_disk_mount

#使用循环检测文件是否存在 存在等待再次检测 如存在 并检查文件变动 退出
for i in $disk_scan_path
	do
DISK_FILE=$(mount -l |awk '{if($1 == "'$i'") {print $3}}')
CHECK_FILE="$DISK_FILE/.eyou_check_disk_time"

if [ -f $CHECK_FILE ]
	then
	if [ "$(grep [0-9] $CHECK_FILE|awk '{print $1}')" != "1" ];then CHECK_TIME > $CHECK_FILE 2>/dev/null;until [ -f $CHECK_FILE ];do CHECK_TIME > $CHECK_FILE 2>/dev/null;done ;echo "$(hostname) $(date +%'F %H:%M:%S') $CHECK_FILE 内容非标准 跳过检查 ，将执行eyou服务启动动作">> $CHECK_DISK_SCAN_CONF; exit_val=0; else exit_val=1;fi
	if [ $exit_val == "1" ];then
	check_time_disk_1=$(crm configure show xml |grep eyou_check_disk|grep monitor|awk -F'=' '{print $3}'|cut -d \" -f2|grep -io "[0-9]\{1,3\}"|head -1)
	check_time_disk=$(echo "${check_time_disk_1}"+5|bc)
		cat_disk_1=$(cat $CHECK_FILE)
		sleep $check_time_disk;wait
		cat_disk_2=$(cat $CHECK_FILE)
		if [ "$cat_disk_1" == "$cat_disk_2" ];then
			CHECK_TIME > $CHECK_FILE 2>/dev/null
			until [ -f $CHECK_FILE ];do CHECK_TIME > $CHECK_FILE 2>/dev/null;done
			echo "$(hostname) $(date +%'F %H:%M:%S') $CHECK_FILE 文件在规定时间内未有改动，将执行eyou服务启动动作.">>$CHECK_DISK_SCAN_CONF
			exit_val=0
		else
			echo "$(hostname) $(date +%'F %H:%M:%S') $CHECK_FILE 文件在规定时间内有改动，停止启动,退出.">>$CHECK_DISK_SCAN_CONF
			exit 1;
		fi
	fi
else
	CHECK_TIME > $CHECK_FILE 2>/dev/null 
	until [ -f $CHECK_FILE ];do CHECK_TIME > $CHECK_FILE 2>/dev/null ;done
	echo "$(hostname) $(date +%'F %H:%M:%S') $CHECK_FILE 文件不存在 跳过检查，将执行eyou服务启动动作." >>$CHECK_DISK_SCAN_CONF
		exit_val=0
		
fi
done
[ $exit_val -eq 0 ] && touch $SENDMAIL_PID_FILE/$pid_name
exit $exit_val
}

#主机服务启动之后 检测状态时更新文件
status_check () {
check_disk_mount
for i in $disk_scan_path
        do
DISK_FILE=$(mount -l |awk '{if($1 == "'$i'") {print $3}}')
CHECK_FILE="$DISK_FILE/.eyou_check_disk_time"
	CHECK_TIME>$CHECK_FILE 2>/dev/null && exit_val=0 || exit_val=1
	until [ -f $CHECK_FILE ];do CHECK_TIME>$CHECK_FILE 2>/dev/null && exit_val=0 || exit_val=1 ;done
if [ $exit_val -eq 0 ];then
	exit $exit_val
else
	echo "$(hostname) $(date +%'F %H:%M:%S') $CHECK_FILE 文件 写入失败. 等待再次执行结果. 第一次." >>$CHECK_DISK_SCAN_CONF
	if CHECK_TIME>$CHECK_FILE 2>/dev/null;then exit $? ;else echo "$(hostname) $(date +%'F %H:%M:%S') $CHECK_FILE 文件 写入失败.停止所有服务. 第二次.">>$CHECK_DISK_SCAN_CONF;exit 1;fi
fi
done
}

stop_check () {
if [ -f $SENDMAIL_PID_FILE/$pid_name ];then
for i in $(disk_scan)
        do
DISK_FILE=$(mount -l |awk '{if($1 == "'$i'") {print $3}}')
CHECK_FILE="$DISK_FILE/.eyou_check_disk_time"
rm -rf $CHECK_FILE >/dev/null 2>&1
while [ -f $CHECK_FILE ];do rm -rf $CHECK_FILE >/dev/null 2>&1;done
exit 0
done
else
	:
fi
}

case $1 in
	start)
	check_crm
	start_check
	;;
	status)
	[ -f $SENDMAIL_PID_FILE/$pid_name ] || exit 1
	check_crm
	status_check
	;;
	stop)
	check_crm stop
	rm -rf $SENDMAIL_PID_FILE/$pid_name
	stop_check
	;;
	*)
	echo $"Usage: $0 {start|stop|status}";exit 1
	;;
esac
